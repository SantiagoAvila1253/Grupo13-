HOJA DE RUTA – PREPARACIÓN DE ARQUITECTURA DE ARCHIVOS DEL PROYECTO
1. Objetivo de esta hoja de ruta
El objetivo es preparar la arquitectura de archivos final del proyecto, eliminando lo obsoleto, creando los nuevos módulos y carpetas necesarios, y dejando la estructura lista para implementar la persistencia con JSON y CSV.

2. Paso 0 – Backup del proyecto actual
Acción:
Hacer una copia o branch del repositorio antes de realizar cambios estructurales.


Motivo:
Permite volver atrás en caso de errores al reorganizar carpetas o renombrar archivos.


Prioridad: Alta.

3. Paso 1 – Alinear estructura de carpetas base
Acción:
Confirmar que existan (o crear si faltan):


core/


funcionalidades/


data/


login/


logs/


tests/


Confirmar que en la raíz del proyecto estén:


app_presentismo.py


README.md


.gitignore


Motivo:
Estas carpetas constituyen la estructura estándar del sistema.


Prioridad: Alta.

4. Paso 2 – Revisión y ajuste de la carpeta core/
Acción:
Conservar y revisar los siguientes archivos:


menus.py


helpers.py


validadores.py


logs_txt.py


datos.py


Crear si no existen:


es_json.py: lectura, escritura y actualización de data/sistema.json.


es_csv.py: lectura, escritura y sincronización de data/asistencia.csv.


estadisticas.py: cálculo de porcentajes de ausencias y bajas automáticas.


Eliminar o limpiar:


Cualquier módulo que aún contenga listas o estructuras hardcodeadas de datos (ya no se usa “base en memoria”).


datos.py debe quedar solo con constantes y referencias simbólicas, no con datos reales.


Motivo:
Centralizar la entrada/salida (E/S) en módulos específicos y reemplazar estructuras de datos temporales por archivos persistentes.


Prioridad: Muy alta.

5. Paso 3 – Alinear carpeta data/
Acción:
Confirmar que data/ contenga únicamente:


sistema.json


asistencia.csv


Limpiar archivos viejos:


Eliminar alumnos.csv, clases.csv u otros que fueron reemplazados.


Mantener solo los dos archivos definidos como persistencia oficial.


Estructura mínima esperada:


sistema.json: con secciones de alumnos, clases, docentes y metadata.


asistencia.csv: con la fila de encabezado
 clase_id;fecha;legajo;apellido;nombre;estado.


Motivo:
Garantizar que los datos maestros y la asistencia vivan en archivos únicos y consistentes.


Prioridad: Alta.

6. Paso 4 – Revisión de carpeta funcionalidades/
Acción:
Mantener los módulos:


alumnos.py


asistencia.py


reportes.py


Asignar responsabilidades:


alumnos.py: alta, baja lógica y modificación de alumnos (opera sobre core/es_json.py).


asistencia.py: manejo de clases, sincronización previa, toma y guardado de asistencia (usa es_json.py y es_csv.py).


reportes.py: generación de listados y análisis (usa es_json.py, es_csv.py y estadisticas.py).


Eliminar módulos antiguos o funciones que trabajen con listas globales en memoria.


Motivo:
Clarificar responsabilidades y eliminar duplicación de lógica.


Prioridad: Media.

7. Paso 5 – Revisión del módulo de login/
Acción:
Mantener login/autenticacion.py.


Asegurar que lea los docentes desde sistema.json (sección "docentes").


Eliminar listas hardcodeadas de usuarios o contraseñas dentro del código.


Motivo:
Unificar el origen de datos y mantener coherencia con la persistencia general.


Prioridad: Media.

8. Paso 6 – Configuración de logs/
Acción:
Confirmar la existencia de:


Carpeta logs/


Archivo logs/logs_sistema.txt


Asegurar que core/logs_txt.py registre operaciones y errores en ese archivo.


Eliminar archivos de log viejos o ubicados fuera de esa carpeta.


Motivo:
Cumplir el requerimiento de manejo de archivos TXT y registro de eventos.


Prioridad: Media.

9. Paso 7 – Revisión de tests/
Acción:
Mantener tests/tests_unitarios.py.


Confirmar que contenga (o se prevea agregar) al menos 3 pruebas:


Lectura y escritura correcta del archivo JSON.


Lectura y escritura/sincronización del CSV.


Cálculo y aplicación de la baja automática por 25 %.


Motivo:
Es requisito formal del TPO tener pruebas unitarias.


Prioridad: Media.

10. Paso 8 – Actualización del README.md
Acción:
Crear o actualizar el archivo README.md en la raíz del proyecto.


Incluir:


Descripción general del sistema.


Explicación de sistema.json y asistencia.csv.


Flujo de sincronización previa a tomar asistencia.


Política de actualización y bajas lógicas.


Regla del 25 % de inasistencias.


Estructura completa del proyecto.


Motivo:
El README es la documentación técnica del sistema y es evaluado como parte de la entrega.


Prioridad: Alta.

11. Resumen de prioridades
Prioridad
Pasos
Alta
0 (Backup), 1 (Estructura base), 2 (core/), 3 (data/), 8 (README.md)
Media
4 (funcionalidades/), 5 (login/), 6 (logs/), 7 (tests/)
Muy alta
2 (core/)


12. Resultado esperado al finalizar la hoja de ruta
Estructura final del proyecto:
GRUPO13-/
├─ app_presentismo.py
├─ README.md
├─ .gitignore
│
├─ core/
│  ├─ datos.py
│  ├─ es_json.py
│  ├─ es_csv.py
│  ├─ estadisticas.py
│  ├─ helpers.py
│  ├─ logs_txt.py
│  ├─ menus.py
│  └─ validadores.py
│
├─ data/
│  ├─ sistema.json
│  └─ asistencia.csv
│
├─ funcionalidades/
│  ├─ alumnos.py
│  ├─ asistencia.py
│  └─ reportes.py
│
├─ login/
│  └─ autenticacion.py
│
├─ logs/
│  └─ logs_sistema.txt
│
└─ tests/
   └─ tests_unitarios.py

